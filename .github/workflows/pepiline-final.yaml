name: GOAT Compile

on: 
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "Obteniendo ultima version del codigo"
        uses: actions/checkout@v3

      - name: "Instalacion Java"
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: "17"

      - name: "Complilacion"   
        run: ./mvnw clean install

      - name: "Verificar paquete"
        run: ls -ltra target  

      - name: "Dependency Check"
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: 'WebGoat'
          path: '.'
          format: 'SARIF'
          out: 'reports'

      - name: "Verificar reporte"
        run: ls -ltra reports 
         

      - name: "Imagen Docker"
        run: |
          docker build -f Dockerfile . -t webgoat/test 
          docker images

      - name: Run Trivy vulnerability scanner 
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'webgoat/test'
          timeout: 10m0s
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          scanners: vuln,secret,config
        continue-on-error: true       

      - name: "Configurar AWS Credentiales"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}    

      - name: "Cargar imagen a ECR"
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/g3i6x0d5
          docker build -t gisellemt .
          docker tag gisellemt:latest public.ecr.aws/g3i6x0d5/gisellemt:latest
          docker push public.ecr.aws/g3i6x0d5/gisellemt:latest

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Test with Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: Terraform
          framework: terraform 
          output_format: cli,sarif
          output_file_path: reports/reportes.sarif
        continue-on-error: true

      - name: "Aprovisionamiento de terraform"
        run: |
          cd Terraform
          terraform init
          terraform plan -out planB
          terraform apply planB >> results_planB.txt
          ip_webgoat=$(cat results_planB.txt | grep "My_ip = " | awk '{ print $3 }' | sed 's/*//g')
          sed -i "s/IP/$ip_webgoat/g" ../Ansible/inventario
          cat ../Ansible/inventario
          echo $ip_webgoat


      - name: "Ejecutar ansible"
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          sudo apt update
          sudo apt install -y ansible 
          cd Ansible 
          echo "$PRIVATE_KEY" >> $HOME/key.pem
          sudo chmod 600 $HOME/key.pem
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook -i inventario server.yaml --become --private-key $HOME/key.pem
          echo "Up server..."
          sleep 45
        continue-on-error: true  

      - name: "Instalar Arachni"
        run: |
          wget https://github.com/Arachni/arachni/releases/download/v1.6.1.3/arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          tar -xvf arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
 
      - name: "Encontrar IP"
        run: |
          ip_webgoat=$(cat Terraform/results_planB.txt | grep "My_ip = " | awk '{ print $3 }' | sed 's/"//g')
          curl http://$ip_webgoat:8080/WebGoat/login
          ./arachni-1.6.1.3-0.6.1.1/bin/arachni --check=* http://$ip_webgoat:8080/WebGoat/login 

      - name: Run static analysis
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          security-checks: 'vuln,secret,config'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'code'
  


      - name: "Tirar infra"
        run: |
          cd Terraform/
          terraform plan -destroy -out plan
          terraform apply plan
         
    

       
